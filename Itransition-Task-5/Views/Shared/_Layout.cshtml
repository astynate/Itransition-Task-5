<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Itransition Task 5</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/content.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/footer.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/main.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/user.css" asp-append-version="true" />
</head>
<body>
    <header>
        <div class="main-container">
            <div class="header-items">
                <a asp-controller="Home" asp-action="Index" class="logo-wrapper">
                    <img src="./img/itransition_logo.svg" class="main-logo" draggable="false" />
                </a>
                <div class="header-items">
                    <div class="header-item-wrapper">
                        <span>Errors: </span>
                        <input type="range" id="rangeInput" max="10" maxlength="4" step="0.25" value="0" onchange="fetchUsers(true)" />
                        <input type="number" id="numberInput" min="0" max="1000" maxlength="4" value="0" onchange="fetchUsers(true)" />
                    </div>
                    <div class="header-item-wrapper">
                        <span>Seed: </span>
                        <input type="number" id="seed" max="1000" min="0" maxlength="4" value="0" onchange="fetchUsers(true)" />
                        <div class="button" onclick="GenerateRandomSeed()">
                            <img src="./img/shuffle.png" class="buttonImage" draggable="false" />
                        </div>
                    </div>
                    <div class="header-item-wrapper">
                        <span>Region: </span>
                        <select id="region" onchange="fetchUsers(true)">
                            <option value="en">United Kingdom</option>
                            <option value="fr">France</option>
                            <option value="de">Germany</option>
                        </select>
                    </div>
                    <button onclick="exportFunction()">Export</button>
                </div>
            </div>
        </div>
    </header>
    <div class="table-header-wrapper">
        <div class="main-container">
            <div class="table-header">
                <span>#</span>
                <div class="line"></div>
                <span>Random ID</span>
                <div class="line"></div>
                <span>Name</span>
                <div class="line"></div>
                <span>Address</span>
                <div class="line"></div>
                <span>Phone number</span>
            </div>
        </div>
    </div>
    <div class="main-wrapper">
        @RenderBody()
        <div class="main-container">
            <div class="main">
                <div class="users">

                </div>
            </div>
            <div class="loader" id="loader">
                <div class="point"></div>
                <div class="point"></div>
                <div class="point"></div>
            </div>
        </div>
    </div>
    <footer class="main-footer">
        <div class="main-container">
            &copy; Andreev S, 2024 — Minsk, Belarus.
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        const rangeInput = document.getElementById('rangeInput');
        const numberInput = document.getElementById('numberInput');

        let page = 0;
        let isAvaliable = false;

        rangeInput.addEventListener('input', function () {
            numberInput.value = rangeInput.value;
        });

        numberInput.addEventListener('input', function () {
            rangeInput.value = numberInput.value;
        });

        const GetRequestParams = (count) => {
            const seed = document.querySelector("#seed").value;
            const localization = document.querySelector("#region").value;

            return `?Seed=${seed}&Localization=${localization}&Error=${numberInput.value}&Page=${page}&Count=${count}`;
        }

        async function fetchUsers(clear = false, count = 20) {
            isAvaliable = false;

            if (clear) { 
                page = 0; 
            }

            const response = await fetch(`/home/users${GetRequestParams(count)}`);
            const htmlContent = await response.text();
            const usersDiv = document.querySelector('.users');

            if (clear) {
                usersDiv.innerHTML = "";
                document.documentElement.scrollTop = 0;
            }

            usersDiv.innerHTML += htmlContent;
            page++;

            await new Promise(resolve => requestAnimationFrame(resolve));
            isAvaliable = true;
        }

        const GenerateRandomSeed = () => {
            document.querySelector("#seed").value = Math.floor(Math.random() * 1000);
            fetchUsers(true);
        }

        function isElementInViewport(el) {
            const rect = el.getBoundingClientRect();

            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            );
        }

        async function handleScroll() {
            const targetDiv = document.getElementById('loader');

            if (isElementInViewport(targetDiv) && isAvaliable) {
                await fetchUsers(false, 10);
            }
        }

        const exportFunction = async () => {
            await fetch(`/export${GetRequestParams(0)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'users.csv';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
            ;
        }

        document.addEventListener('DOMContentLoaded', fetchUsers);
        window.addEventListener('scroll', handleScroll);
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>